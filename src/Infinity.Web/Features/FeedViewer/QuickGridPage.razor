@page "/quickgrid"

@using Microsoft.AspNetCore.Components.QuickGrid

<h3>QuickGridPage</h3>

<QuickGrid Items="@people.AsQueryable()" @ref="theGrid">
    <PropertyColumn Property="@(p => p.PersonId)" Sortable="true" />
    <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
    <PropertyColumn Property="@(p => p.BirthDate)" Format="yyyy-MM-dd" Sortable="true" />
</QuickGrid>
<BSButton Color="BSColor.Primary" OnClick="@OnClick">Connect</BSButton>

@code {
    QuickGrid<Person>? theGrid;

    record Person(int PersonId, string Name, DateOnly BirthDate);

    GridItemsProvider<Person>? personItemsProvider;

    List<Person> people = new List<Person>
    {
        new Person(10895, "Jean Martin", new DateOnly(1985, 3, 16)),
        new Person(10944, "António Langa", new DateOnly(1991, 12, 1)),
        new Person(11203, "Julie Smith", new DateOnly(1958, 10, 10)),
        new Person(11205, "Nur Sari", new DateOnly(1922, 4, 27)),
        new Person(11898, "Jose Hernandez", new DateOnly(2011, 5, 3)),
        new Person(12130, "Kenji Sato", new DateOnly(2004, 1, 9)),
    };

    private async void OnClick()
    {
        people.Add(new Person(Random.Shared.Next(99999), "Name Name", new DateOnly(2004, 1, 9)));

        await theGrid?.RefreshDataAsync()!;
    }

    protected override void OnInitialized()
    {
        personItemsProvider = async req =>
        {
            return await GetPersons();
        };
    }

    private async Task<GridItemsProviderResult<Person>> GetPersons()
    {

        return await Task.FromResult(GridItemsProviderResult.From(people, people.Count));
    }
}